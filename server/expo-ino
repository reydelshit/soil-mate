#include <Wire.h>
#include <ESP8266WiFi.h>
#include <WiFiClient.h>

#define SOIL_MOISTURE_PIN A0  // Analog pin for soil moisture sensor

const char* ssid = "TupiNHS_SHS";
const char* password = "2023SSLG2023";


const char* server = "192.168.1.139"; 
const int port = 3000;

const int humidity = 65;
const int temperature = 30;
bool npkSensorOn = false;

int npkRangeMin = 1;         // Minimum NPK value (Nitrogen and Phosphorous)
int npkRangeMax = 20;         // Maximum NPK value (Nitrogen and Phosphorous)
int npkIncrement = 1;         // Increment value for NPK (Nitrogen and Phosphorous)
int kRangeMin = 1;           // Minimum K value (Potassium)
int kRangeMax = 25;           // Maximum K value (Potassium)

WiFiClient client;

void setup() {
  Serial.begin(9600);  
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  
  Serial.println("");
  Serial.println("WiFi connected");
}

void loop() {
  byte val1 = 0, val2 = 0, val3 = 0;
  
  int soilMoisture = readSoilMoisture();
  if (soilMoisture >= 1) {
    npkSensorOn = true;
    val1 = getRandomNPKValue(npkRangeMin, npkRangeMax, npkIncrement);  
    val2 = getRandomNPKValue(npkRangeMin, npkRangeMax, npkIncrement);  
    val3 = random(kRangeMin, kRangeMax + 1); 
    
  } else {
    npkSensorOn = false;
    val1 = 0;
    val2 = 0;
    val3 = 0;
  }

  Serial.print("Nitrogen: ");
  Serial.print(val1);
  Serial.println(" mg/kg");
  Serial.print("Phosphorous: ");
  Serial.print(val2);
  Serial.println(" mg/kg");
  Serial.print("Potassium: ");
  Serial.print(val3);
  Serial.println(" mg/kg");
  Serial.print("Soil Moisture: ");
  Serial.print(soilMoisture);
  Serial.println(" %");
  delay(2000);


if (client.connect(server, port)) {
    Serial.println("Connected to server");

    String postStr;
    postStr += "&N=";
    postStr += String(val1);
    postStr += "&P=";
    postStr += String(val2);
    postStr += "&K=";
    postStr += String(val3);
    postStr += "&soil=";
    postStr += String(soilMoisture);
    postStr += "&humidity=";
    postStr += String(humidity);
    postStr += "&temperature=";
    postStr += String(temperature);


    client.print("POST /update HTTP/1.1\r\n");
    client.print("Host: ");
    client.print(server);
    client.print("\r\n");
    client.print("Content-Type: application/x-www-form-urlencoded\r\n");
    client.print("Content-Length: ");
    client.print(postStr.length());
    client.print("\r\n\r\n");
    client.print(postStr);

    client.stop();
} else {
    Serial.println("Connection failed");
}

}

int readSoilMoisture() {
  int soilMoistureValue = analogRead(SOIL_MOISTURE_PIN);
  int mappedValue = map(soilMoistureValue, 0, 1023, 0, 100); // Map the analog value to a percentage (0-100)
  int reversedValue = ((100 - 45) - mappedValue); // Reverse the mapped value
  return reversedValue;
}

// Function to generate random NPK value within the specified range and increment
int getRandomNPKValue(int rangeMin, int rangeMax, int increment) {
  int numValues = ((rangeMax - rangeMin) / increment) + 1;
  int randomIndex = random(numValues);
  int randomValue = rangeMin + (randomIndex * increment);
  return randomValue;
}

